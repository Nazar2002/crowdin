{"ast":null,"code":"import i18n from \"i18next\";\nimport { initReactI18next } from \"react-i18next\";\nimport Backend from \"i18next-http-backend\";\nimport LanguageDetector from \"i18next-browser-languagedetector\";\ni18n.use(Backend).use(initReactI18next).use(LanguageDetector).init({\n  fallbackLng: \"en\",\n  detection: {\n    order: [\"path\", \"localStorage\", \"htmlTag\", \"cookie\"],\n    caches: [\"localStorage\", \"cookie\"] // cache user language on\n\n  },\n  interpolation: {\n    format: (value, format, lng) => {\n      if (format === \"number\") {\n        return new Intl.NumberFormat(lng).format(value);\n      }\n\n      if (format === \"date\") {\n        return new Intl.DateTimeFormat(lng).format(value);\n      }\n\n      if (format === \"currency\") {\n        return new Intl.NumberFormat(lng, {\n          style: \"currency\",\n          currency: \"USD\"\n        }).format(value);\n      }\n    },\n    escapeValue: false // react already safes from xss\n\n  }\n});\nexport default i18n;","map":{"version":3,"sources":["/Users/nazargavucak/Desktop/react_i18next_project/src/i18n.js"],"names":["i18n","initReactI18next","Backend","LanguageDetector","use","init","fallbackLng","detection","order","caches","interpolation","format","value","lng","Intl","NumberFormat","DateTimeFormat","style","currency","escapeValue"],"mappings":"AAAA,OAAOA,IAAP,MAAiB,SAAjB;AACA,SAASC,gBAAT,QAAiC,eAAjC;AACA,OAAOC,OAAP,MAAoB,sBAApB;AACA,OAAOC,gBAAP,MAA6B,kCAA7B;AAEAH,IAAI,CACDI,GADH,CACOF,OADP,EAEGE,GAFH,CAEOH,gBAFP,EAGGG,GAHH,CAGOD,gBAHP,EAIGE,IAJH,CAIQ;AACJC,EAAAA,WAAW,EAAE,IADT;AAEJC,EAAAA,SAAS,EAAE;AACTC,IAAAA,KAAK,EAAE,CAAC,MAAD,EAAS,cAAT,EAAyB,SAAzB,EAAoC,QAApC,CADE;AAETC,IAAAA,MAAM,EAAE,CAAC,cAAD,EAAiB,QAAjB,CAFC,CAE2B;;AAF3B,GAFP;AAMJC,EAAAA,aAAa,EAAE;AACbC,IAAAA,MAAM,EAAE,CAACC,KAAD,EAAQD,MAAR,EAAgBE,GAAhB,KAAwB;AAC9B,UAAIF,MAAM,KAAK,QAAf,EAAyB;AACvB,eAAO,IAAIG,IAAI,CAACC,YAAT,CAAsBF,GAAtB,EAA2BF,MAA3B,CAAkCC,KAAlC,CAAP;AACD;;AACD,UAAID,MAAM,KAAK,MAAf,EAAuB;AACrB,eAAO,IAAIG,IAAI,CAACE,cAAT,CAAwBH,GAAxB,EAA6BF,MAA7B,CAAoCC,KAApC,CAAP;AACD;;AACD,UAAID,MAAM,KAAK,UAAf,EAA2B;AACzB,eAAO,IAAIG,IAAI,CAACC,YAAT,CAAsBF,GAAtB,EAA2B;AAChCI,UAAAA,KAAK,EAAE,UADyB;AAEhCC,UAAAA,QAAQ,EAAE;AAFsB,SAA3B,EAGJP,MAHI,CAGGC,KAHH,CAAP;AAID;AACF,KAdY;AAebO,IAAAA,WAAW,EAAE,KAfA,CAeO;;AAfP;AANX,CAJR;AA6BA,eAAenB,IAAf","sourcesContent":["import i18n from \"i18next\";\nimport { initReactI18next } from \"react-i18next\";\nimport Backend from \"i18next-http-backend\";\nimport LanguageDetector from \"i18next-browser-languagedetector\";\n\ni18n\n  .use(Backend)\n  .use(initReactI18next)\n  .use(LanguageDetector)\n  .init({\n    fallbackLng: \"en\",\n    detection: {\n      order: [\"path\", \"localStorage\", \"htmlTag\", \"cookie\"],\n      caches: [\"localStorage\", \"cookie\"], // cache user language on\n    },\n    interpolation: {\n      format: (value, format, lng) => {\n        if (format === \"number\") {\n          return new Intl.NumberFormat(lng).format(value);\n        }\n        if (format === \"date\") {\n          return new Intl.DateTimeFormat(lng).format(value);\n        }\n        if (format === \"currency\") {\n          return new Intl.NumberFormat(lng, {\n            style: \"currency\",\n            currency: \"USD\",\n          }).format(value);\n        }\n      },\n      escapeValue: false, // react already safes from xss\n    },\n  });\n\nexport default i18n;\n"]},"metadata":{},"sourceType":"module"}